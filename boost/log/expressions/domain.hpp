/*
 *          Copyright Andrey Semashev 2007 - 2012.
 * Distributed under the Boost Software License, Version 1.0.
 *    (See accompanying file LICENSE_1_0.txt or copy at
 *          http://www.boost.org/LICENSE_1_0.txt)
 */
/*!
 * \file   domain.hpp
 * \author Andrey Semashev
 * \date   29.01.2012
 *
 * The header contains Boost.Proto domain for template expressions.
 */

#if (defined(_MSC_VER) && _MSC_VER > 1000)
#pragma once
#endif // _MSC_VER > 1000

#ifndef BOOST_LOG_EXPRESSIONS_DOMAIN_HPP_INCLUDED_
#define BOOST_LOG_EXPRESSIONS_DOMAIN_HPP_INCLUDED_

#include <boost/proto/domain.hpp>
#include <boost/phoenix/core/domain.hpp>
#include <boost/log/detail/prologue.hpp>

namespace boost {

namespace BOOST_LOG_NAMESPACE {

namespace expressions {

/*!
 * \brief Template expressions domain
 *
 * This class introduces a template expressions domain used by
 * Boost.Log filtering and formatting expressions. The domain
 * is a sub-domain of Boost.Phoenix expressions domain,
 * which allows Boost.Log template expressions to participate
 * in other functional expressions generated by Boost.Phoenix.
 */
struct domain :
    public proto::domain<
        phoenix::phoenix_domain::proto_generator,
        phoenix::phoenix_domain::proto_grammar,
        phoenix::phoenix_domain
    >
{
    template< typename T, typename = void >
    struct as_expr :
        public phoenix::phoenix_domain::as_expr< T >
    {
    };

    //! Convert attribute keywords into terminals with cached attribute names
    template< typename T >
    struct as_expr< T, typename T::_is_boost_log_attribute_keyword >
    {
        typedef typename T::or_none_result_type result_type;

        result_type operator() (T const& keyword) const
        {
            return keyword.or_none();
        }
    };

    template< typename T >
    struct as_child :
        public as_expr< T >
    {
    };
};

} // namespace expressions

} // namespace log

} // namespace boost

#endif // BOOST_LOG_EXPRESSIONS_DOMAIN_HPP_INCLUDED_
